{"version":3,"sources":["parser.ts","data.ts","filter.ts","RepoList.tsx","Microphone.tsx","SpeechApp.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["IntentType","EntityType","SortEntityType","repositories","name","description","language","followers","stars","forks","SpeechIntentValues","Object","values","SortTypeValues","filterRepos","input","filters","output","languages","length","filter","repo","includes","toLowerCase","undefined","sortBy","sort","left","right","Name","localeCompare","Description","Language","Followers","compareNumber","Stars","Forks","RepoList","React","memo","repos","className","map","RepoRow","key","Microphone","state","segment","onRecord","enabled","text","SpeechState","Idle","Ready","Recording","Connecting","Loading","onClick","disabled","Transcript","words","w","Word","word","index","isFinal","value","SpeechApp","useState","defaultFilter","setFilter","setRepos","useSpeechContext","toggleRecording","speechState","useEffect","nextFilter","intent","Unknown","parseIntent","Filter","langs","entities","e","type","push","parseLanguageEntity","emptyFilter","Sort","s","val","SortField","parseSortEntity","Reset","parseSegment","App","appId","process","Error","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qKAEYA,EAOAC,EAKAC,E,yECLCC,EAA6B,CACxC,CACEC,KAAM,uBACNC,YACE,kFACFC,SAAU,aACVC,UAAW,KACXC,MAAO,KACPC,MAAO,MAET,CACEL,KAAM,cACNC,YACE,oKACFC,SAAU,aACVC,UAAW,IACXC,MAAO,MACPC,MAAO,MAET,CACEL,KAAM,mBACNC,YAAa,qBACbC,SAAU,aACVC,UAAW,IACXC,MAAO,MACPC,MAAO,OAET,CACEL,KAAM,gBACNC,YAAa,6CACbC,SAAU,aACVC,UAAW,KACXC,MAAO,KACPC,MAAO,MAET,CACEL,KAAM,wBACNC,YAAa,uDACbC,SAAU,KACVC,UAAW,KACXC,MAAO,MACPC,MAAO,OAET,CACEL,KAAM,YACNC,YACE,yGACFC,SAAU,KACVC,UAAW,KACXC,MAAO,MACPC,MAAO,OAET,CACEL,KAAM,gBACNC,YAAa,2DACbC,SAAU,KACVC,UAAW,IACXC,MAAO,MACPC,MAAO,MAET,CACEL,KAAM,kBACNC,YACE,iHACFC,SAAU,KACVC,UAAW,KACXC,MAAO,MACPC,MAAO,MAET,CACEL,KAAM,kBACNC,YACE,6EACFC,SAAU,SACVC,UAAW,KACXC,MAAO,KACPC,MAAO,OAET,CACEL,KAAM,wBACNC,YAAa,yDACbC,SAAU,SACVC,UAAW,KACXC,MAAO,MACPC,MAAO,OAET,CACEL,KAAM,gBACNC,YAAa,sDACbC,SAAU,SACVC,UAAW,KACXC,MAAO,MACPC,MAAO,OAET,CACEL,KAAM,iBACNC,YACE,0FACFC,SAAU,SACVC,UAAW,IACXC,MAAO,MACPC,MAAO,O,kBD5GCT,K,kBAAAA,E,YAAAA,E,gBAAAA,E,eAAAA,M,cAOAC,K,oBAAAA,E,wBAAAA,M,cAKAC,K,kBAAAA,E,YAAAA,E,0BAAAA,E,oBAAAA,E,sBAAAA,E,cAAAA,E,eAAAA,M,KAUZ,IAAMQ,EAAqBC,OAAOC,OAAOZ,GACnCa,EAAiBF,OAAOC,OAAOV,GEjB9B,SAASY,EACdC,EACAC,GACe,IAAD,EACVC,EAASF,EAEPG,EAAS,UAAGF,EAAQE,iBAAX,QAAwB,GAOvC,OANIA,EAAUC,OAAS,IACrBF,EAASF,EAAMK,QAAO,SAACC,GAAD,OACpBH,EAAUI,SAASD,EAAKf,SAASiB,wBAIdC,IAAnBR,EAAQS,OACHR,EAGFA,EAAOS,MAAK,SAACC,EAAMC,GACxB,OAAQZ,EAAQS,QACd,KAAKvB,EAAe2B,KAClB,OAAOF,EAAKvB,KAAK0B,cAAcF,EAAMxB,MACvC,KAAKF,EAAe6B,YAClB,OAAOJ,EAAKtB,YAAYyB,cAAcF,EAAMvB,aAC9C,KAAKH,EAAe8B,SAClB,OAAOL,EAAKrB,SAASwB,cAAcF,EAAMtB,UAC3C,KAAKJ,EAAe+B,UAClB,OAAOC,EAAcP,EAAKpB,UAAWqB,EAAMrB,WAC7C,KAAKL,EAAeiC,MAClB,OAAOD,EAAcP,EAAKnB,MAAOoB,EAAMpB,OACzC,KAAKN,EAAekC,MAClB,OAAOF,EAAcP,EAAKlB,MAAOmB,EAAMnB,OAG3C,OAAO,KAIX,SAASyB,EAAcP,EAAcC,GACnC,OAAID,EAAOC,GACD,EAGND,EAAOC,EACF,EAGF,EC9CF,IAAMS,EAAWC,IAAMC,MAC5B,YAAoC,IAAjCC,EAAgC,EAAhCA,MACD,OACE,yBAAKC,UAAU,SACb,+BACE,+BACE,4BACE,oCACA,wCACA,2CACA,yCACA,qCACA,uCAGJ,+BACGD,EAAME,KAAI,SAACrB,GAAD,OACT,kBAACsB,EAAD,CAAStB,KAAMA,EAAMuB,IAAKvB,EAAKjB,gBASvCuC,EAAUL,IAAMC,MACpB,YAAkD,IAA/ClB,EAA8C,EAA9CA,KACD,OACE,4BACE,4BAAKA,EAAKjB,MACV,4BAAKiB,EAAKf,UACV,4BAAKe,EAAKhB,aACV,4BAAKgB,EAAKd,WACV,4BAAKc,EAAKb,OACV,4BAAKa,EAAKZ,WC9BLoC,EAAaP,IAAMC,MAC9B,YAAuD,IAApDO,EAAmD,EAAnDA,MAAOC,EAA4C,EAA5CA,QAASC,EAAmC,EAAnCA,SACbC,GAAU,EACVC,EAAO,QAEX,OAAQJ,GACN,KAAKK,cAAYC,KACjB,KAAKD,cAAYE,MACfJ,GAAU,EACVC,EAAO,QACP,MACF,KAAKC,cAAYG,UACfL,GAAU,EACVC,EAAO,OACP,MACF,KAAKC,cAAYI,WACjB,KAAKJ,cAAYK,QACfP,GAAU,EACVC,EAAO,aAIX,OACE,yBAAKT,UAAU,SACb,4BAAQgB,QAAST,EAAUU,UAAWT,GACnCC,GAEH,kBAACS,EAAD,CAAYZ,QAASA,QAMvBY,EAAarB,IAAMC,MACvB,YAA4D,IAAzDQ,EAAwD,EAAxDA,QACD,YAAgBvB,IAAZuB,EAEA,6BACE,4DAMJ,6BACGA,EAAQa,MAAMlB,KAAI,SAACmB,GAAD,OACjB,kBAACC,EAAD,CAAMC,KAAMF,EAAGjB,IAAKiB,EAAEG,eAO1BF,EAAOxB,IAAMC,MACjB,YAAkD,IAA/CwB,EAA8C,EAA9CA,KACD,OAAIA,EAAKE,QACA,0CAAYF,EAAKG,MAAjB,MAGF,wCAAUH,EAAKG,MAAf,SCxDEC,EAAsB,WAAoB,IAAD,EACxBC,mBAAiBC,GADO,mBAC7CjD,EAD6C,KACrCkD,EADqC,OAE1BF,mBACxBtD,EAAYX,EAAckE,IAHwB,mBAE7C7B,EAF6C,KAEtC+B,EAFsC,OAMFC,6BAA1CC,EAN4C,EAM5CA,gBAAiBC,EAN2B,EAM3BA,YAAa3B,EANc,EAMdA,QAiBtC,OAfA4B,qBAAU,WACR,QAAgBnD,IAAZuB,EAAJ,CAIA,IAAM6B,EAAU,2BACXxD,GA2BT,SAAsB2B,GAGpB,OLjCK,SAAqBA,GAAqC,IACvD8B,EAAW9B,EAAX8B,OAER,OAAInE,EAAmBY,SAASuD,EAAOA,QAC9BA,EAAOA,OAGT7E,EAAW8E,QKwBHC,CAAYhC,IAGzB,KAAK/C,EAAWgF,OACd,IAAM9D,ELzBL,SAA6B6B,GAClC,IADoE,EAC9DkC,EAAkB,GAD4C,cAGpDlC,EAAQmC,UAH4C,IAGpE,2BAAkC,CAAC,IAAxBC,EAAuB,QAC5BA,EAAEC,OAASnF,EAAW+B,UACxBiD,EAAMI,KAAKF,EAAEjB,MAAM3C,gBAL6C,8BASpE,OAAO0D,EKgBeK,CAAoBvC,GAEtC,OAAyB,IAArB7B,EAAUC,OACLoE,EAGF,CACLrE,aAEJ,KAAKlB,EAAWwF,KACd,IAAM/D,ELvBL,SAAyBsB,GAC9B,IADsE,EAClE0C,EAAIvF,EAAe4E,QAD+C,cAGtD/B,EAAQmC,UAH8C,IAGtE,2BAAkC,CAAC,IAAxBC,EAAuB,QAC1BO,EAAMP,EAAEjB,MAAM3C,cAEhB4D,EAAEC,OAASnF,EAAW0F,WAAa9E,EAAeS,SAASoE,KAC7DD,EAAIC,IAP8D,8BAWtE,OAAOD,EKYYG,CAAgB7C,GAC/B,OAAItB,IAAWvB,EAAe4E,QACrB,CACLrD,UAIG8D,EACT,KAAKvF,EAAW6F,MACd,OAAOxB,EACT,QACE,OAAOkB,GApDJO,CAAa/C,IAGlBuB,EAAUM,GACVL,EAASzD,EAAYX,EAAciB,OAElC,CAAC2B,IAGF,6BACE,kBAACF,EAAD,CACEE,QAASA,EACTD,MAAO4B,EACP1B,SAAUyB,IAEZ,kBAACpC,EAAD,CAAUG,MAAOA,MAKjB+C,EAAsB,GACtBlB,EAAwB,CAC5BnD,UAAW,GACXO,OAAQvB,EAAe2B,MCSVkE,MAxDf,WAAgB,IACRC,EAAK,OAAGC,8EAAgC,GAC9C,QAAczE,IAAVwE,EACF,MAAME,MAAM,4BAGd,IAAM5F,EAAQ,OAAG2F,gBAAkC,GACnD,QAAiBzE,IAAblB,EACF,MAAM4F,MAAM,kCAGd,OACE,yBAAKzD,UAAU,OACb,yBAAKA,UAAU,SACb,2DAGF,yBAAKA,UAAU,SAAf,kDACkD,IAChD,uBAAG0D,KAAK,wBAAR,YAFF,OAEkD,IAChD,uBAAGA,KAAK,uBAAR,SAHF,iCAGwE,IACtE,uBAAGA,KAAK,4DAAR,WAKF,yBAAK1D,UAAU,SAAf,sFAGE,4BACE,4BACE,iDAEF,4BACE,kEARN,qCAYE,4BACE,4BACE,8CAEF,4BACE,+CAjBN,8CAoB6C,iDApB7C,KAuBA,kBAAC,iBAAD,CAAgBuD,MAAOA,EAAO1F,SAAUA,GACtC,kBAAC,EAAD,SC7CY8F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c4708637.chunk.js","sourcesContent":["import { SpeechSegment } from \"@speechly/react-client\";\n\nexport enum IntentType {\n  Unknown = \"unknown\",\n  Sort = \"sort\",\n  Filter = \"filter\",\n  Reset = \"reset\",\n}\n\nexport enum EntityType {\n  Language = \"language\",\n  SortField = \"sort_field\",\n}\n\nexport enum SortEntityType {\n  Unknown = \"unknown\",\n  Name = \"name\",\n  Description = \"description\",\n  Language = \"language\",\n  Followers = \"followers\",\n  Stars = \"stars\",\n  Forks = \"forks\",\n}\n\nconst SpeechIntentValues = Object.values(IntentType) as string[];\nconst SortTypeValues = Object.values(SortEntityType) as string[];\n\nexport function parseIntent(segment: SpeechSegment): IntentType {\n  const { intent } = segment;\n\n  if (SpeechIntentValues.includes(intent.intent)) {\n    return intent.intent as IntentType;\n  }\n\n  return IntentType.Unknown;\n}\n\nexport function parseLanguageEntity(segment: SpeechSegment): string[] {\n  const langs: string[] = [];\n\n  for (const e of segment.entities) {\n    if (e.type === EntityType.Language) {\n      langs.push(e.value.toLowerCase());\n    }\n  }\n\n  return langs;\n}\n\nexport function parseSortEntity(segment: SpeechSegment): SortEntityType {\n  let s = SortEntityType.Unknown;\n\n  for (const e of segment.entities) {\n    const val = e.value.toLowerCase();\n\n    if (e.type === EntityType.SortField && SortTypeValues.includes(val)) {\n      s = val as SortEntityType;\n    }\n  }\n\n  return s;\n}\n","export type Repository = {\n  name: string;\n  description: string;\n  language: string;\n  followers: number;\n  stars: number;\n  forks: number;\n};\n\nexport const repositories: Repository[] = [\n  {\n    name: \"microsoft/typescript\",\n    description:\n      \"TypeScript is a superset of JavaScript that compiles to clean JavaScript output\",\n    language: \"TypeScript\",\n    followers: 2200,\n    stars: 65000,\n    forks: 8700,\n  },\n  {\n    name: \"nestjs/nest\",\n    description:\n      \"A progressive Node.js framework for building efficient, scalable, and enterprise-grade server-side applications on top of TypeScript & JavaScript (ES6, ES7, ES8)\",\n    language: \"TypeScript\",\n    followers: 648,\n    stars: 30900,\n    forks: 2800,\n  },\n  {\n    name: \"microsoft/vscode\",\n    description: \"Visual Studio Code\",\n    language: \"TypeScript\",\n    followers: 3000,\n    stars: 105000,\n    forks: 16700,\n  },\n  {\n    name: \"denoland/deno\",\n    description: \"A secure JavaScript and TypeScript runtime\",\n    language: \"TypeScript\",\n    followers: 1700,\n    stars: 68000,\n    forks: 3500,\n  },\n  {\n    name: \"kubernetes/kubernetes\",\n    description: \"Production-Grade Container Scheduling and Management\",\n    language: \"Go\",\n    followers: 3300,\n    stars: 70700,\n    forks: 25500,\n  },\n  {\n    name: \"moby/moby\",\n    description:\n      \"Moby Project - a collaborative project for the container ecosystem to assemble container-based systems\",\n    language: \"Go\",\n    followers: 3200,\n    stars: 58600,\n    forks: 16900,\n  },\n  {\n    name: \"gohugoio/hugo\",\n    description: \"The worldâ€™s fastest framework for building websites\",\n    language: \"Go\",\n    followers: 1000,\n    stars: 47200,\n    forks: 5400,\n  },\n  {\n    name: \"grafana/grafana\",\n    description:\n      \"The tool for beautiful monitoring and metric analytics & dashboards for Graphite, InfluxDB & Prometheus & More\",\n    language: \"Go\",\n    followers: 1300,\n    stars: 37500,\n    forks: 7600,\n  },\n  {\n    name: \"pytorch/pytorch\",\n    description:\n      \"Tensors and Dynamic neural networks in Python with strong GPU acceleration\",\n    language: \"Python\",\n    followers: 1600,\n    stars: 43000,\n    forks: 11200,\n  },\n  {\n    name: \"tensorflow/tensorflow\",\n    description: \"An Open Source Machine Learning Framework for Everyone\",\n    language: \"Python\",\n    followers: 8300,\n    stars: 149000,\n    forks: 82900,\n  },\n  {\n    name: \"django/django\",\n    description: \"The Web framework for perfectionists with deadlines\",\n    language: \"Python\",\n    followers: 2300,\n    stars: 52800,\n    forks: 22800,\n  },\n  {\n    name: \"apache/airflow\",\n    description:\n      \"Apache Airflow - A platform to programmatically author, schedule, and monitor workflows\",\n    language: \"Python\",\n    followers: 716,\n    stars: 18500,\n    forks: 7200,\n  },\n];\n","import { Repository } from \"./data\";\nimport { SortEntityType } from \"./parser\";\n\nexport type Filter = {\n  languages?: string[];\n  sortBy?: SortEntityType;\n};\n\nexport function filterRepos(\n  input: Repository[],\n  filters: Filter\n): Repository[] {\n  let output = input;\n\n  const languages = filters.languages ?? [];\n  if (languages.length > 0) {\n    output = input.filter((repo) =>\n      languages.includes(repo.language.toLowerCase())\n    );\n  }\n\n  if (filters.sortBy === undefined) {\n    return output;\n  }\n\n  return output.sort((left, right) => {\n    switch (filters.sortBy) {\n      case SortEntityType.Name:\n        return left.name.localeCompare(right.name);\n      case SortEntityType.Description:\n        return left.description.localeCompare(right.description);\n      case SortEntityType.Language:\n        return left.language.localeCompare(right.language);\n      case SortEntityType.Followers:\n        return compareNumber(left.followers, right.followers);\n      case SortEntityType.Stars:\n        return compareNumber(left.stars, right.stars);\n      case SortEntityType.Forks:\n        return compareNumber(left.forks, right.forks);\n    }\n\n    return 0;\n  });\n}\n\nfunction compareNumber(left: number, right: number) {\n  if (left < right) {\n    return -1;\n  }\n\n  if (left > right) {\n    return 1;\n  }\n\n  return 0;\n}\n","import React from \"react\";\n\nimport { Repository } from \"./data\";\n\ntype Props = {\n  repos: Repository[];\n};\n\nexport const RepoList = React.memo(\n  ({ repos }: Props): JSX.Element => {\n    return (\n      <div className=\"block\">\n        <table>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Language</th>\n              <th>Description</th>\n              <th>Followers</th>\n              <th>Stars</th>\n              <th>Forks</th>\n            </tr>\n          </thead>\n          <tbody>\n            {repos.map((repo) => (\n              <RepoRow repo={repo} key={repo.name} />\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n);\n\nconst RepoRow = React.memo(\n  ({ repo }: { repo: Repository }): JSX.Element => {\n    return (\n      <tr>\n        <td>{repo.name}</td>\n        <td>{repo.language}</td>\n        <td>{repo.description}</td>\n        <td>{repo.followers}</td>\n        <td>{repo.stars}</td>\n        <td>{repo.forks}</td>\n      </tr>\n    );\n  }\n);\n","import React from \"react\";\nimport {\n  Word as SpeechWord,\n  SpeechSegment,\n  SpeechState,\n} from \"@speechly/react-client\";\n\ntype Props = {\n  segment?: SpeechSegment;\n  state: SpeechState;\n  onRecord: () => Promise<void>;\n};\n\nexport const Microphone = React.memo(\n  ({ state, segment, onRecord }: Props): JSX.Element => {\n    let enabled = false;\n    let text = \"Error\";\n\n    switch (state) {\n      case SpeechState.Idle:\n      case SpeechState.Ready:\n        enabled = true;\n        text = \"Start\";\n        break;\n      case SpeechState.Recording:\n        enabled = true;\n        text = \"Stop\";\n        break;\n      case SpeechState.Connecting:\n      case SpeechState.Loading:\n        enabled = false;\n        text = \"Loading...\";\n        break;\n    }\n\n    return (\n      <div className=\"block\">\n        <button onClick={onRecord} disabled={!enabled}>\n          {text}\n        </button>\n        <Transcript segment={segment} />\n      </div>\n    );\n  }\n);\n\nconst Transcript = React.memo(\n  ({ segment }: { segment?: SpeechSegment }): JSX.Element => {\n    if (segment === undefined) {\n      return (\n        <div>\n          <em>Waiting for speech input...</em>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {segment.words.map((w) => (\n          <Word word={w} key={w.index} />\n        ))}\n      </div>\n    );\n  }\n);\n\nconst Word = React.memo(\n  ({ word }: { word: SpeechWord }): JSX.Element => {\n    if (word.isFinal) {\n      return <strong>{`${word.value} `}</strong>;\n    }\n\n    return <span>{`${word.value} `}</span>;\n  }\n);\n","import React, { useEffect, useState } from \"react\";\nimport { SpeechSegment, useSpeechContext } from \"@speechly/react-client\";\n\nimport { repositories, Repository } from \"./data\";\nimport { Filter, filterRepos } from \"./filter\";\nimport {\n  IntentType,\n  SortEntityType,\n  parseIntent,\n  parseLanguageEntity,\n  parseSortEntity,\n} from \"./parser\";\n\nimport { RepoList } from \"./RepoList\";\nimport { Microphone } from \"./Microphone\";\n\nexport const SpeechApp: React.FC = (): JSX.Element => {\n  const [filter, setFilter] = useState<Filter>(defaultFilter);\n  const [repos, setRepos] = useState<Repository[]>(\n    filterRepos(repositories, defaultFilter)\n  );\n\n  const { toggleRecording, speechState, segment } = useSpeechContext();\n\n  useEffect(() => {\n    if (segment === undefined) {\n      return;\n    }\n\n    const nextFilter = {\n      ...filter,\n      ...parseSegment(segment),\n    };\n\n    setFilter(nextFilter);\n    setRepos(filterRepos(repositories, filter));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [segment]);\n\n  return (\n    <div>\n      <Microphone\n        segment={segment}\n        state={speechState}\n        onRecord={toggleRecording}\n      />\n      <RepoList repos={repos} />\n    </div>\n  );\n};\n\nconst emptyFilter: Filter = {};\nconst defaultFilter: Filter = {\n  languages: [],\n  sortBy: SortEntityType.Name,\n};\n\nfunction parseSegment(segment: SpeechSegment): Filter {\n  const intent = parseIntent(segment);\n\n  switch (intent) {\n    case IntentType.Filter:\n      const languages = parseLanguageEntity(segment);\n\n      if (languages.length === 0) {\n        return emptyFilter;\n      }\n\n      return {\n        languages,\n      };\n    case IntentType.Sort:\n      const sortBy = parseSortEntity(segment);\n      if (sortBy !== SortEntityType.Unknown) {\n        return {\n          sortBy,\n        };\n      }\n\n      return emptyFilter;\n    case IntentType.Reset:\n      return defaultFilter;\n    default:\n      return emptyFilter;\n  }\n}\n","import React from \"react\";\nimport { SpeechProvider } from \"@speechly/react-client\";\n\nimport \"./App.css\";\n\nimport { SpeechApp } from \"./SpeechApp\";\n\nfunction App() {\n  const appId = process.env.REACT_APP_APP_ID ?? \"\";\n  if (appId === undefined) {\n    throw Error(\"Missing Speechly app ID!\");\n  }\n\n  const language = process.env.REACT_APP_LANGUAGE ?? \"\";\n  if (language === undefined) {\n    throw Error(\"Missing Speechly app language!\");\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"block\">\n        <h1>Speechly React example app</h1>\n      </div>\n\n      <div className=\"block\">\n        This is an example app for filtering data using{\" \"}\n        <a href=\"https://speechly.com\">Speechly</a> and{\" \"}\n        <a href=\"https://reactjs.org\">React</a>. Check out the source code on{\" \"}\n        <a href=\"https://github.com/speechly/react-example-repo-filtering\">\n          GitHub\n        </a>\n      </div>\n\n      <div className=\"block\">\n        Try filtering the repos by language by pressing the \"Start\" button and\n        saying e.g.:\n        <ul>\n          <li>\n            <em>Show me Go repos</em>\n          </li>\n          <li>\n            <em>Show all TypeScript repositories</em>\n          </li>\n        </ul>\n        You can also sort by saying, e.g.:\n        <ul>\n          <li>\n            <em>Sort by stars</em>\n          </li>\n          <li>\n            <em>Order by name</em>\n          </li>\n        </ul>\n        If you want to reset the filters, just say <em>Reset the filters</em>.\n      </div>\n\n      <SpeechProvider appId={appId} language={language}>\n        <SpeechApp />\n      </SpeechProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}